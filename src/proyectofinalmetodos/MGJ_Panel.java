/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectofinalmetodos;

import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Morales
 */
public class MGJ_Panel extends javax.swing.JPanel {

    Validate V = new Validate();
    Mensaje M = new Mensaje();
    private final int TABLE_HEIGHT = 271;
    String letras[] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
    
    
    public MGJ_Panel(JButton backButton, int x_button, int y_button, JLabel Titulo) {
        initComponents();
        int titulo_x = 586;
        int titulo_y = 80;
        this.add(backButton);
        backButton.setBounds(x_button, y_button, 50, 50);
        this.add(Titulo); 
        Titulo.setBounds(200, Math.abs(y_button - (titulo_y/2)), titulo_x, titulo_y);
        this.validate();
        
        //Inicializar componentes
        MGJ_A_Size.setEditor(new JSpinner.DefaultEditor(MGJ_A_Size));
        
        MGJ_Matrix_A.setTableHeader(null); 
        MGJ_Matrix_b.setTableHeader(null); 
        MGJ_Matrix_Xs.setTableHeader(null); 
        MGJ_Matrix_Xs.setDefaultEditor(Object.class, null);
        
        changeTable(MGJ_Matrix_A, (int)MGJ_A_Size.getValue(), (int)MGJ_A_Size.getValue());
        changeTable(MGJ_Matrix_b, (int)MGJ_A_Size.getValue(), 1);
        changeTable(MGJ_Matrix_Xs, 1, (int)MGJ_A_Size.getValue());
        setXs();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MGJ_Matrix_A = new javax.swing.JTable();
        MGJ_A_Size = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        MGJ_Matrix_b = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        MGJ_ResolveButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        MGJ_Results = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        MGJ_Matrix_Xs = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(185, 219, 255), 4));
        setEnabled(false);

        MGJ_Matrix_A.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        MGJ_Matrix_A.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        MGJ_Matrix_A.setGridColor(new java.awt.Color(204, 204, 204));
        MGJ_Matrix_A.setRowSelectionAllowed(false);
        MGJ_Matrix_A.setShowGrid(true);
        MGJ_Matrix_A.getTableHeader().setResizingAllowed(false);
        MGJ_Matrix_A.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(MGJ_Matrix_A);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );

        MGJ_A_Size.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        MGJ_A_Size.setModel(new javax.swing.SpinnerNumberModel(2, 2, 5, 1));
        MGJ_A_Size.setToolTipText("Cantidad de incógnitas del SEL");
        MGJ_A_Size.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                MGJ_A_SizeStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(185, 219, 255));
        jLabel1.setText("A");

        MGJ_Matrix_b.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        MGJ_Matrix_b.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        MGJ_Matrix_b.setGridColor(new java.awt.Color(204, 204, 204));
        MGJ_Matrix_b.setRowSelectionAllowed(false);
        MGJ_Matrix_b.setShowGrid(true);
        MGJ_Matrix_b.getTableHeader().setResizingAllowed(false);
        MGJ_Matrix_b.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(MGJ_Matrix_b);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 30)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("=");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(185, 219, 255));
        jLabel3.setText("b");

        MGJ_ResolveButton.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        MGJ_ResolveButton.setText("Resolver");
        MGJ_ResolveButton.setToolTipText("Resolver SEL");
        MGJ_ResolveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MGJ_ResolveButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Cantidad de incógnitas:");

        MGJ_Results.setEditable(false);
        MGJ_Results.setColumns(20);
        MGJ_Results.setRows(5);
        MGJ_Results.setToolTipText("Resultados");
        jScrollPane3.setViewportView(MGJ_Results);

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel4.setText("Resultados");

        MGJ_Matrix_Xs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        MGJ_Matrix_Xs.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        MGJ_Matrix_Xs.setEnabled(false);
        MGJ_Matrix_Xs.setGridColor(new java.awt.Color(204, 204, 204));
        MGJ_Matrix_Xs.setRowSelectionAllowed(false);
        MGJ_Matrix_Xs.setShowGrid(true);
        MGJ_Matrix_Xs.getTableHeader().setResizingAllowed(false);
        MGJ_Matrix_Xs.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(MGJ_Matrix_Xs);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(157, 157, 157))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(69, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(138, 138, 138)
                        .addComponent(jLabel5)
                        .addGap(62, 62, 62))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(MGJ_A_Size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(MGJ_ResolveButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addComponent(jLabel4)))
                        .addContainerGap(49, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(126, 126, 126)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(MGJ_A_Size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(MGJ_ResolveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void MGJ_A_SizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_MGJ_A_SizeStateChanged
        changeTable(MGJ_Matrix_A, (int)MGJ_A_Size.getValue(), (int)MGJ_A_Size.getValue());
        changeTable(MGJ_Matrix_b, (int)MGJ_A_Size.getValue(), 1);
        changeTable(MGJ_Matrix_Xs, 1, (int)MGJ_A_Size.getValue());
        setXs();
        MGJ_Results.setText("");
    }//GEN-LAST:event_MGJ_A_SizeStateChanged

    private void MGJ_ResolveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MGJ_ResolveButtonActionPerformed
        try{
        String A_values[][] = getMatrixValues(MGJ_Matrix_A, (int)MGJ_A_Size.getValue(), (int)MGJ_A_Size.getValue());
        if(V.isMatrixValid(A_values)){
            String b_values[][] = getMatrixValues(MGJ_Matrix_b, (int)MGJ_A_Size.getValue(), 1);
            if(!V.isMatrixValid(b_values)){
                M.mostarError("Los valores de b no son válidos.");
                MGJ_Results.setText("");
                return;
            }
            Matrix A = new Matrix(A_values);
            Matrix b = new Matrix(b_values);
            MGJ mgj = new MGJ(A.augmentWith(b), false);
            ArrayList start = mgj.start();
            boolean sol_mult = (boolean) start.get(1);
            int row_1 = (int) start.get(3);
            int column_1 = (int) start.get(4);
            System.out.println("row a poner 1 = " + row_1);
            System.out.println("columna poner 1= " + column_1);
            Matrix mgj_res = (Matrix) start.get(5);
            //bool-incconsistente, bool - sol_multi, String, int renglon 0s, int column donde debe ir el 1, matriz resultado
            if (!(boolean) start.get(0)){
                System.out.println("primera operacion mgj");
                mgj_res.print();
                System.out.println("-----------");
                while(sol_mult){
                    String valor = "";
                    while(!V.isNumberValid((valor==null?"":valor))){
                        valor = M.obtenerInput((String) start.get(2));
                        if(valor==null){
                            MGJ_Results.setText("");
                            return;
                        }
                        if(!V.isNumberValid((valor==null?"":valor))){
                            M.mostarError("El valor dado es inválido.");
                        }
                    }
                    Matrix new_res = mgj.setValueToResult(row_1, column_1, Double.parseDouble(valor));
                    System.out.println("con valor agregado");
                    new_res.print();
                    System.out.println("-----------");
                    mgj = new MGJ(new_res, false);
                    ArrayList new_start = mgj.start();
                    if((boolean) new_start.get(0)){
                        M.mostarAdver((String) start.get(2));
                        MGJ_Results.setText("");
                        return;
                    }
                    sol_mult = (boolean) new_start.get(1);
                    row_1 = (int) new_start.get(3);
                    column_1 = (int) new_start.get(4);
                    mgj_res = (Matrix) new_start.get(5);
                    Matrix preA_res = new_res.getSubMatrixFrom(0, new_res.Rows-1, 0, new_res.Columns-2);
                    Matrix preb_res = new_res.getSubMatrixFrom(0, new_res.Rows-1, new_res.Columns-1, new_res.Columns-1);
                    setPreResult(MGJ_Matrix_A, preA_res.Values);
                    setPreResult(MGJ_Matrix_b, preb_res.Values);
                }
                String final_res = "";
                mgj_res = mgj_res.getSubMatrixFrom(0, mgj_res.Rows-1, mgj_res.Columns-1, mgj_res.Columns-1);
                for(int d=0; d<mgj_res.Rows; d++){
                    final_res = final_res + letras[d]+ " = " +mgj_res.Values[d][0]+"\n";
                }
                MGJ_Results.setText(final_res);
            }
            else{
                M.mostarAdver((String) start.get(2));
                MGJ_Results.setText("");
            }
        }
        else{
            M.mostarError("Los valores de A no son válidos.");
            MGJ_Results.setText("");
        }
        }
        catch(Exception e){
            M.mostarError("ERROR FATAL: "+e.toString()+"\nCERRANDO PROGRAMA.");
            System.exit(0);
        }
    }//GEN-LAST:event_MGJ_ResolveButtonActionPerformed

    private void changeTable(JTable table, int rows, int columns){        
        DefaultTableModel temp = new DefaultTableModel();
        temp.setColumnCount(columns);
        temp.setRowCount(rows);
        table.setModel(temp);
        int row_height = TABLE_HEIGHT/(int)MGJ_A_Size.getValue();
        table.setRowHeight((table.equals(MGJ_Matrix_Xs)? 32 : row_height));
        if((table.equals(MGJ_Matrix_Xs))){
            return;
        }
        Font table_font = table.getFont();
        Font new_font = new Font(table_font.getName(), table_font.getStyle(), (int) ((TABLE_HEIGHT/(int)MGJ_A_Size.getValue()) * 0.33));
        table.setFont(new_font);      
    }
   
    
    private String[][] getMatrixValues(JTable matrix, int rows, int columns){
        String Values[][] = new String[rows][columns];
        for(int i = 0; i<(int) rows; i++){
            for(int j = 0; j<(int) columns; j++){
                String n = (String)matrix.getModel().getValueAt(i, j);
                Values[i][j] = (n==null? "" : n);
            }           
        }
        return Values;
    }   
    
    private void setXs(){
        for(int j = 0; j < MGJ_Matrix_Xs.getColumnCount(); j++){
            MGJ_Matrix_Xs.setValueAt("<html><center><p>"+letras[j]+"</p></center></html>", 0, j);
        }           
    }
    
    private void setPreResult(JTable matrix, double values[][]){
        for(int i = 0; i<(int) values.length; i++){
            for(int j = 0; j<(int) values[i].length; j++){
                matrix.getModel().setValueAt(""+values[i][j], i, j);
            }           
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner MGJ_A_Size;
    private javax.swing.JTable MGJ_Matrix_A;
    private javax.swing.JTable MGJ_Matrix_Xs;
    private javax.swing.JTable MGJ_Matrix_b;
    private javax.swing.JButton MGJ_ResolveButton;
    private javax.swing.JTextArea MGJ_Results;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
